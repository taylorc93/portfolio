#include <iostream>
#include <cstdlib>
#include "BogSolver.h"
#include "BogValidator.h"
using namespace std;

BogValidator::BogValidator(){

}

/*
BogValidator::~BogValidator(){

}
*/

bool BogValidator::readDict(){
	if (!solver.readDict()){
		return false;
	}
	return true;
}

bool BogValidator::readBoard(){
	if (!solver.readBoard()){
		return false;
	}
	return true;
}

void BogValidator::checkWords(){
	string s;
	solver.solve();

	while (cin >> s){
		s = cleanString(s);
		if (isValid(s)){
			validUserWords.push_back(s);
		}
		else{
			invalidUserWords.push_back(s);
		}
	}

	for (int i = 0; i < validUserWords.size(); i++){
		cout << "OK " << validUserWords[i] << endl;;
	}
	for (int i = 0; i < invalidUserWords.size(); i++){
		cout << "NO " << invalidUserWords[i] << endl;
	}
}

bool BogValidator::isValid(string s){
	if (alreadyAdded(s)){
		return false;
	}
	else if (notOnBoard(s)){
		return false;
	}
	else if (s.length() < 3){
		return false;
	}
	else{
		return true;
	}
}

string BogValidator::cleanString(string s){
	for (int i = 0; i < s.length(); i++){
		s[i] = toupper(s[i]);
	}
	return s;
}

bool BogValidator::alreadyAdded(string s){
	for (int i = 0; i < validUserWords.size(); i++){
		if (s == validUserWords[i]){
			return true;
		}
	}
	return false;
}

bool BogValidator::notOnBoard(string s){
	BogWordList* temp = solver.getWords();

	for (int i = 0; i < temp->numWords; i++){
		string word = bogToString(temp->words[i]);
	   	if (word == s){
			return false;
		}
	}
	delete BogWordList;
	return true;
}

string BogValidator::bogToString(BogWord w){
    string temp = "";
    for (int i = 0; i < w.numLetts; i++){
        temp += w.letts[i].c;
    }
    return temp;
}

